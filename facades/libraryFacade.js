/**
 * @file libraryFacade.js
 * @description Impl√©mentation du pattern Facade.
 * Cette facade simplifie les op√©rations complexes en plusieurs √©tapes,
 * comme demander un livre, approuver/rejeter une demande, ou retourner un livre.
 * 
 * PATTERN: Facade
 * OBJECTIF: Simplifier les op√©rations complexes en plusieurs √©tapes en fournissant
 * une interface unifi√©e qui orchestre plusieurs services (UserService, BorrowingService, BookService).
 */

const userService = require('../services/userService');
const borrowingService = require('../services/borrowingService');
const bookServiceProxy = require('../services/bookServiceProxy');

class LibraryFacade {
  /**
   * @description Orchestre l'action "demander un livre"
   * Cette m√©thode coordonne plusieurs √©tapes:
   * 1. V√©rifier l'utilisateur existe
   * 2. V√©rifier le livre existe et est disponible
   * 3. V√©rifier l'utilisateur n'a pas d√©j√† une demande en cours pour ce livre
   * 4. Cr√©er la demande d'emprunt
   * 
   * @param {string} userId - ID de l'utilisateur qui fait la demande
   * @param {string} bookId - ID du livre demand√©
   * @returns {Promise<Object>} La demande d'emprunt cr√©√©e avec les informations du livre
   * @throws {Error} Si l'utilisateur, le livre n'existe pas, ou si le livre n'est pas disponible
   */
  async requestBook(userId, bookId) {
    try {
      console.log(`üìö Facade: Traitement de la demande d'emprunt - User: ${userId}, Book: ${bookId}`);

      // √âTAPE 1: V√©rifier que l'utilisateur existe
      const user = await userService.findUserById(userId);
      if (!user) {
        throw new Error(`Utilisateur ${userId} non trouv√©`);
      }
      console.log(`  ‚úì Utilisateur trouv√©: ${user.name} (${user.role})`);

      // √âTAPE 2: V√©rifier que le livre existe
      const book = await bookServiceProxy.findBookById(bookId);
      if (!book) {
        throw new Error(`Livre ${bookId} non trouv√©`);
      }
      console.log(`  ‚úì Livre trouv√©: "${book.title}" par ${book.author}`);

      // √âTAPE 3: V√©rifier que le livre est disponible
      if (!book.isAvailable) {
        throw new Error(`Le livre "${book.title}" n'est pas disponible actuellement`);
      }
      console.log(`  ‚úì Livre disponible`);

      // √âTAPE 4: V√©rifier que l'utilisateur n'a pas d√©j√† une demande en cours pour ce livre
      const hasPendingRequest = await borrowingService.hasPendingRequestForBook(userId, bookId);
      if (hasPendingRequest) {
        throw new Error(`Vous avez d√©j√† une demande en cours pour ce livre`);
      }
      console.log(`  ‚úì Pas de demande en cours pour ce livre`);

      // √âTAPE 5: Cr√©er la demande d'emprunt
      const borrowingRequest = await borrowingService.createBorrowingRequest(userId, bookId);
      console.log(`  ‚úì Demande d'emprunt cr√©√©e avec succ√®s (ID: ${borrowingRequest.id})`);

      // Retourner la demande avec les informations du livre et de l'utilisateur
      return {
        borrowing: borrowingRequest,
        book: book,
        user: {
          id: user.id,
          name: user.name,
          email: user.email
        },
        message: `Demande d'emprunt cr√©√©e avec succ√®s pour "${book.title}"`
      };

    } catch (error) {
      console.error(`‚úó Erreur lors de la demande d'emprunt:`, error.message);
      throw error;
    }
  }

  /**
   * @description Orchestre l'action "examiner une demande" (approuver ou rejeter)
   * Cette m√©thode coordonne plusieurs √©tapes:
   * 1. V√©rifier que l'utilisateur est biblioth√©caire ou admin
   * 2. R√©cup√©rer la demande
   * 3. Si approbation: v√©rifier la disponibilit√© du livre, approuver et marquer le livre comme non disponible
   * 4. Si rejet: rejeter simplement
   * 
   * @param {Object} librarianUser - Utilisateur biblioth√©caire qui examine la demande
   * @param {string} requestId - ID de la demande √† examiner
   * @param {string} action - Action √† effectuer ('approve' ou 'reject')
   * @param {string} returnDueDate - Date de retour pr√©vue (optionnel)
   * @returns {Promise<Object>} R√©sultat de l'action avec les d√©tails
   * @throws {Error} Si les permissions sont insuffisantes ou si une erreur survient
   */
  async reviewRequest(librarianUser, requestId, action, returnDueDate = null) {
    try {
      console.log(`üìã Facade: Examen de la demande ${requestId} - Action: ${action}`);

      // √âTAPE 1: V√©rifier que l'utilisateur a les permissions
      if (librarianUser.role !== 'Librarian' && librarianUser.role !== 'Admin') {
        throw new Error('Acc√®s refus√©: Seuls les biblioth√©caires et administrateurs peuvent examiner les demandes');
      }
      console.log(`  ‚úì Permissions v√©rifi√©es: ${librarianUser.name} (${librarianUser.role})`);

      // √âTAPE 2: R√©cup√©rer la demande
      const request = await borrowingService.findRequestById(requestId);
      if (!request) {
        throw new Error(`Demande ${requestId} non trouv√©e`);
      }

      // V√©rifier que la demande est en attente
      if (request.status !== 'pending') {
        throw new Error(`Cette demande a d√©j√† √©t√© trait√©e (statut: ${request.status})`);
      }
      console.log(`  ‚úì Demande trouv√©e (statut: ${request.status})`);

      // √âTAPE 3: Traiter selon l'action
      if (action === 'reject') {
        // REJET: Simple mise √† jour du statut
        await borrowingService.updateRequest(requestId, { status: 'rejected' });
        console.log(`  ‚úì Demande rejet√©e`);

        return {
          success: true,
          action: 'rejected',
          requestId: requestId,
          message: 'Demande d\'emprunt rejet√©e'
        };

      } else if (action === 'approve') {
        // APPROBATION: Processus plus complexe
        
        // √âTAPE 3a: Re-v√©rifier la disponibilit√© du livre (CRUCIAL pour √©viter les conflits)
        const book = await bookServiceProxy.findBookById(request.bookId);
        if (!book) {
          throw new Error(`Livre ${request.bookId} non trouv√©`);
        }

        if (!book.isAvailable) {
          throw new Error(`Le livre "${book.title}" vient d'√™tre emprunt√© par quelqu'un d'autre`);
        }
        console.log(`  ‚úì Livre "${book.title}" disponible`);

        // √âTAPE 3b: Calculer la date de retour
        const approvalDate = Date.now();
        let dueDate;
        
        if (returnDueDate) {
          // Utiliser la date fournie par le librarian
          dueDate = new Date(returnDueDate).getTime();
          console.log(`  ‚úì Date de retour personnalis√©e: ${new Date(dueDate).toLocaleDateString()}`);
        } else {
          // Par d√©faut: 14 jours
          const durationInDays = 14;
          dueDate = approvalDate + (durationInDays * 24 * 60 * 60 * 1000);
          console.log(`  ‚úì Date de retour par d√©faut (+14 jours): ${new Date(dueDate).toLocaleDateString()}`);
        }

        await borrowingService.updateRequest(requestId, {
          status: 'approved',
          approvalDate: approvalDate,
          dueDate: dueDate
        });
        console.log(`  ‚úì Demande approuv√©e (date de retour: ${new Date(dueDate).toLocaleDateString()})`);

        // √âTAPE 3c: Mettre √† jour le statut du livre (non disponible)
        await bookServiceProxy.updateBook(request.bookId, { isAvailable: false }, librarianUser);
        console.log(`  ‚úì Livre marqu√© comme non disponible`);

        return {
          success: true,
          action: 'approved',
          requestId: requestId,
          bookTitle: book.title,
          dueDate: new Date(dueDate).toLocaleDateString(),
          message: `Emprunt approuv√©. Retour pr√©vu le ${new Date(dueDate).toLocaleDateString()}`
        };

      } else {
        throw new Error(`Action invalide: ${action}. Actions valides: 'approve' ou 'reject'`);
      }

    } catch (error) {
      console.error(`‚úó Erreur lors de l'examen de la demande:`, error.message);
      throw error;
    }
  }

  /**
   * @description R√©cup√®re toutes les demandes en attente (utilitaire)
   * @returns {Promise<Array>} Liste des demandes en attente avec les d√©tails
   */
  async getPendingRequests() {
    try {
      const requests = await borrowingService.findPendingRequests();
      
      // Enrichir chaque demande avec les informations du livre et de l'utilisateur
      const enrichedRequests = await Promise.all(
        requests.map(async (request) => {
          const book = await bookServiceProxy.findBookById(request.bookId);
          const user = await userService.findUserById(request.userId);
          
          return {
            id: request.id,
            requestDate: new Date(request.requestDate).toLocaleDateString(),
            status: request.status,
            book: book ? {
              id: book.id,
              title: book.title,
              author: book.author
            } : null,
            user: user ? {
              id: user.id,
              name: user.name,
              email: user.email
            } : null
          };
        })
      );

      return enrichedRequests;
    } catch (error) {
      console.error('‚úó Erreur lors de la r√©cup√©ration des demandes en attente:', error.message);
      throw error;
    }
  }

  /**
   * @description R√©cup√®re tous les emprunts actifs (status = 'approved')
   * avec les informations enrichies (utilisateur + livre)
   * 
   * @returns {Promise<Array>} Liste des emprunts actifs avec d√©tails
   */
  async getActiveLoans() {
    try {
      console.log('üìö Facade: R√©cup√©ration des emprunts actifs');

      // √âTAPE 1: R√©cup√©rer tous les emprunts avec status 'approved'
      const approvedBorrowings = await borrowingService.findBorrowingsByStatus('approved');
      console.log(`  ‚úì ${approvedBorrowings.length} emprunt(s) actif(s) trouv√©(s)`);

      // √âTAPE 2: Enrichir chaque emprunt avec les infos du livre et de l'utilisateur
      const enrichedLoans = await Promise.all(
        approvedBorrowings.map(async (borrowing) => {
          const book = await bookServiceProxy.findBookById(borrowing.bookId);
          const user = await userService.findUserById(borrowing.userId);

          return {
            id: borrowing.id,
            requestDate: new Date(borrowing.requestDate).toLocaleDateString(),
            approvalDate: borrowing.approvalDate ? new Date(borrowing.approvalDate).toLocaleDateString() : 'N/A',
            dueDate: borrowing.dueDate ? new Date(borrowing.dueDate).toLocaleDateString() : 'N/A',
            dueDateTimestamp: borrowing.dueDate || null,
            isLate: borrowing.dueDate && Date.now() > borrowing.dueDate,
            status: borrowing.status,
            book: book ? {
              id: book.id,
              title: book.title,
              author: book.author,
              coverImageUrl: book.coverImageUrl
            } : null,
            user: user ? {
              id: user.id,
              name: user.name,
              email: user.email,
              role: user.role
            } : null
          };
        })
      );

      return enrichedLoans;
    } catch (error) {
      console.error('‚úó Erreur lors de la r√©cup√©ration des emprunts actifs:', error.message);
      throw error;
    }
  }

  /**
   * @description Orchestre le retour d'un livre emprunt√©
   * Cette m√©thode coordonne plusieurs √©tapes:
   * 1. R√©cup√©rer la demande d'emprunt
   * 2. V√©rifier que le livre est bien en status 'approved'
   * 3. Mettre √† jour le statut √† 'returned' avec la date de retour
   * 4. Remettre le livre comme disponible
   * 
   * @param {Object} user - L'utilisateur qui retourne le livre
   * @param {string} requestId - ID de la demande d'emprunt
   * @returns {Promise<Object>} R√©sultat du retour avec d√©tails
   * @throws {Error} Si la demande n'existe pas ou n'est pas en status 'approved'
   */
  async returnBook(user, requestId) {
    try {
      console.log(`üìö Facade: Retour du livre - Demande ${requestId}`);

      // √âTAPE 1: R√©cup√©rer la demande
      const request = await borrowingService.findRequestById(requestId);
      if (!request) {
        throw new Error(`Demande ${requestId} non trouv√©e`);
      }

      // √âTAPE 2: V√©rifier que c'est bien approuv√©
      if (request.status !== 'approved') {
        throw new Error(`Ce livre ne peut √™tre retourn√© (statut: ${request.status})`);
      }
      console.log(`  ‚úì Demande trouv√©e (statut: ${request.status})`);

      // √âTAPE 3: R√©cup√©rer le livre
      const book = await bookServiceProxy.findBookById(request.bookId);
      if (!book) {
        throw new Error(`Livre ${request.bookId} non trouv√©`);
      }
      console.log(`  ‚úì Livre "${book.title}" trouv√©`);

      // √âTAPE 4: Mettre √† jour le statut de la demande
      const returnDate = Date.now();
      const isLate = request.dueDate && returnDate > request.dueDate;
      
      await borrowingService.updateRequest(requestId, {
        status: 'returned',
        returnDate: returnDate
      });
      console.log(`  ‚úì Demande marqu√©e comme retourn√©e${isLate ? ' (EN RETARD)' : ''}`);

      // √âTAPE 5: Remettre le livre comme disponible
      // Utilisation du proxy avec un utilisateur syst√®me (op√©ration automatique de retour)
      const systemUser = { role: 'Admin', email: 'system@library.com', name: 'System' };
      console.log(`  ‚Üí Mise √† jour du livre ${request.bookId} - isAvailable: true`);
      const updatedBook = await bookServiceProxy.updateBook(request.bookId, { isAvailable: true }, systemUser);
      console.log(`  ‚úì Livre "${book.title}" marqu√© comme disponible (isAvailable: ${updatedBook.isAvailable})`);

      return {
        success: true,
        requestId: requestId,
        bookTitle: book.title,
        returnDate: new Date(returnDate).toLocaleDateString(),
        wasLate: isLate,
        message: isLate ? 
          `Livre "${book.title}" retourn√© (en retard)` : 
          `Livre "${book.title}" retourn√© avec succ√®s`
      };
    } catch (error) {
      console.error('‚úó Erreur lors du retour du livre:', error.message);
      throw error;
    }
  }
}

module.exports = new LibraryFacade();
